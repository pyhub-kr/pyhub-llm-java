name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests during release'
        required: false
        type: boolean
        default: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        fi
        
        echo "Releasing version: $VERSION"
        echo "Is prerelease: ${{ steps.version.outputs.is_prerelease }}"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !github.event.inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ubuntu-gradle-11-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ubuntu-gradle-11-
          ubuntu-gradle-
          
    - name: Run tests
      run: |
        chmod +x gradlew
        ./gradlew test --no-daemon --console=plain

  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    environment: 
      name: maven-central
      url: https://central.sonatype.com/artifact/kr.pyhub/pyhub-llm/${{ needs.validate.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ubuntu-gradle-11-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ubuntu-gradle-11-
          ubuntu-gradle-
          
    - name: Decode GPG key
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d > $HOME/secring.gpg
        
    - name: Update version in build.gradle
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        sed -i "s/version = '.*'/version = '$VERSION'/" build.gradle
        echo "Updated version to: $VERSION"
        
    - name: Build and test
      if: ${{ github.event.inputs.skip_tests != 'true' }}
      run: |
        chmod +x gradlew
        ./gradlew clean build --no-daemon --console=plain
        
    - name: Build without tests
      if: ${{ github.event.inputs.skip_tests == 'true' }}
      run: |
        chmod +x gradlew
        ./gradlew clean build -x test --no-daemon --console=plain
        
    - name: Publish to Maven Central
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # GPG passphraseÍ∞Ä ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        if [ -n "${{ secrets.GPG_PASSPHRASE }}" ]; then
          echo "Using GPG with passphrase"
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository \
            --no-daemon --console=plain \
            -Psigning.keyId="${{ secrets.GPG_KEY_ID }}" \
            -Psigning.password="${{ secrets.GPG_PASSPHRASE }}" \
            -Psigning.secretKeyRingFile="$HOME/secring.gpg"
        else
          echo "Using GPG without passphrase"
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository \
            --no-daemon --console=plain \
            -Psigning.keyId="${{ secrets.GPG_KEY_ID }}" \
            -Psigning.secretKeyRingFile="$HOME/secring.gpg"
        fi
          
    - name: Clean up GPG key
      if: always()
      run: rm -f $HOME/secring.gpg
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ needs.validate.outputs.version }}
        path: |
          build/libs/
          build/publications/
          
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Find the section for this version
          CHANGELOG=$(awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release $VERSION"
          fi
        else
          CHANGELOG="Release $VERSION"
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-${{ needs.validate.outputs.version }}
        path: artifacts/
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        release_name: Release ${{ needs.validate.outputs.version }}
        body: |
          ## PyHub LLM Java ${{ needs.validate.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### Maven Dependency
          
          ```xml
          <dependency>
              <groupId>kr.pyhub</groupId>
              <artifactId>pyhub-llm</artifactId>
              <version>${{ needs.validate.outputs.version }}</version>
          </dependency>
          ```
          
          ### Gradle Dependency
          
          ```gradle
          implementation 'kr.pyhub:pyhub-llm:${{ needs.validate.outputs.version }}'
          ```
          
          ---
          
          üöÄ This release is automatically published to [Maven Central](https://central.sonatype.com/artifact/kr.pyhub/pyhub-llm/${{ needs.validate.outputs.version }})
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease }}
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/pyhub-llm-java-${{ needs.validate.outputs.version }}.jar
        asset_name: pyhub-llm-java-${{ needs.validate.outputs.version }}.jar
        asset_content_type: application/java-archive

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, release, github-release]
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: Notify success
      run: |
        echo "‚úÖ Successfully released PyHub LLM Java ${{ needs.validate.outputs.version }} to Maven Central!"
        echo "üîó Maven Central: https://central.sonatype.com/artifact/kr.pyhub/pyhub-llm/${{ needs.validate.outputs.version }}"
        
    - name: Update README badges
      if: needs.validate.outputs.is_prerelease == 'false'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
        
    # Add any notification logic here (Slack, Discord, etc.)