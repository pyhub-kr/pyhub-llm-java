plugins {
    id 'java-library'
    id 'jacoco'
    // id 'checkstyle' // Disabled for now
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = 'kr.pyhub'
version = '0.1.0-SNAPSHOT'

// Project metadata for Maven Central
ext {
    projectName = 'PyHub LLM Java'
    projectDescription = 'A unified Java library for multiple LLM providers (OpenAI, Anthropic, Google, Ollama, Upstage) with streaming, caching, and conversation management'
    projectUrl = 'https://github.com/pyhub-kr/pyhub-llm-java'
    scmUrl = 'https://github.com/pyhub-kr/pyhub-llm-java.git'
    issueTrackerUrl = 'https://github.com/pyhub-kr/pyhub-llm-java/issues'
    
    licenseName = 'The Apache License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    
    developerId = 'pyhub'
    developerName = 'PyHub Team'
    developerEmail = 'team@pyhub.kr'
    developerOrganization = 'PyHub'
    developerOrganizationUrl = 'https://pyhub.kr'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    // Official SDKs
    implementation 'com.openai:openai-java:2.7.0'
    implementation 'com.anthropic:anthropic-java:2.1.0'
    
    // HTTP Client (still needed for other providers)
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.12'
    
    // Annotations (Optional but useful)
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Reactive Streams (for Phase 2)
    implementation 'io.projectreactor:reactor-core:3.4.33'
    
    // Caching (for Phase 3)
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'io.projectreactor:reactor-test:3.4.33'
    
    // Test Lombok support
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

test {
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    // Generate test coverage report
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    
    reports {
        xml.required = true
        html.required = true
    }
}

// Checkstyle configuration - disabled for now
// checkstyle {
//     toolVersion = '8.45.1' // Java 8 compatible version
//     configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
//     ignoreFailures = true // Ignore failures for now
// }

// Create a fat JAR with all dependencies
shadowJar {
    archiveBaseName = 'pyhub-llm-java'
    archiveClassifier = 'all'
    archiveVersion = project.version
    
    manifest {
        attributes(
            'Main-Class': 'kr.pyhub.llm.cli.CLI',
            'Implementation-Title': 'PyHub LLM Java',
            'Implementation-Version': project.version
        )
    }
}

// Task to run the CLI
task runCli(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'kr.pyhub.llm.cli.CLI'
    
    // Pass command line arguments
    if (project.hasProperty('args')) {
        args project.property('args').split()
    }
}

// Ensure Java 8 compatibility
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

// Generate sources JAR
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

// Generate JavaDoc JAR
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Wrapper task for consistent Gradle version
wrapper {
    gradleVersion = '7.6.3'
}

// Maven Central publishing configuration
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            groupId = project.group
            artifactId = 'pyhub-llm'
            version = project.version
            
            artifact sourcesJar
            artifact javadocJar
            
            pom {
                name = projectName
                description = projectDescription
                url = projectUrl
                
                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                
                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                        organization = developerOrganization
                        organizationUrl = developerOrganizationUrl
                    }
                }
                
                scm {
                    connection = "scm:git:${scmUrl}"
                    developerConnection = "scm:git:${scmUrl}"
                    url = projectUrl
                }
                
                issueManagement {
                    system = 'GitHub'
                    url = issueTrackerUrl
                }
                
                // Remove dependencies with 'provided' scope
                withXml {
                    def dependenciesNode = asNode().dependencies[0]
                    if (dependenciesNode) {
                        dependenciesNode.dependency.removeAll { dep ->
                            dep.scope.text() == 'provided'
                        }
                    }
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

// Signing configuration
signing {
    required { gradle.taskGraph.hasTask("publish") }
    
    def signingKeyId = project.findProperty("signing.keyId") ?: System.getenv("GPG_KEY_ID")
    def signingKey = project.findProperty("signing.secretKey") ?: System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = project.findProperty("signing.password") ?: System.getenv("GPG_PASSPHRASE")
    
    if (signingKey) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    }
    
    sign publishing.publications.maven
}

// Javadoc configuration for Java 8 compatibility
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Ensure signing happens after publishing tasks are configured
tasks.withType(Sign) {
    onlyIf { gradle.taskGraph.hasTask(":publish") || gradle.taskGraph.hasTask(":publishToMavenLocal") }
}

// Nexus publishing configuration
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            
            username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
}